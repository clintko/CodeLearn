#install.packages("mvtnorm")
#install.packages("MARSS")
library(dygraphs)
library(MARSS)
# load the data (there are 3 datasets contained here)
data(lakeWAplankton)
dat = lakeWAplanktonTrans
class(dat)
apply(dat[,c(-1:-2)], 2, function(x){mean(x, na.rm=TRUE)})
apply(dat[,c(-1:-2)], 2, function(x){sd(x, na.rm=TRUE)})
# use only the 10 years from 1980-1989
plankdat = dat[dat[,"Year"]>=1980 & dat[,"Year"]<1990,]
# create vector of phytoplankton group names
phytoplankton = c("Cryptomonas", "Diatoms", "Greens",
"Unicells", "Other.algae")
# get only the phytoplankton
dat.spp.1980 = plankdat[,phytoplankton]
# transpose data so time goes across columns
dat.spp.1980 = t(dat.spp.1980)
# get number of time series
N.ts = dim(dat.spp.1980)[1] # there are 5 features
# get length of time series
TT = dim(dat.spp.1980)[2]   # there are 120 time points
Sigma = sqrt(apply(dat.spp.1980, 1, var, na.rm=TRUE))
y.bar = apply(dat.spp.1980, 1, mean, na.rm=TRUE)
dat.z = (dat.spp.1980 - y.bar) * (1/Sigma)
rownames(dat.z) = rownames(dat.spp.1980)
par(mfrow=c(3, 2))
plot(dat.spp.1980[1, ], pch=19, type="b", main="Cryptomonas")
plot(dat.spp.1980[2, ], pch=19, type="b", main="Diatoms")
plot(dat.spp.1980[3, ], pch=19, type="b", main="Greens")
plot(dat.spp.1980[4, ], pch=19, type="b", main="Unicells")
plot(dat.spp.1980[5, ], pch=19, type="b", main="Other.algae")
plot(dat.spp.1980[1, ], pch=19, type="b", main="Cryptomonas")
Z.vals = list(
"z11",    0,     0,
"z21", "z22",    0,
"z31", "z32", "z33",
"z41", "z42", "z43",
"z51", "z52", "z53")
Z = matrix(Z.vals, nrow=N.ts, ncol=3, byrow=TRUE)
Q=B=diag(1, 3)
R.vals = list(
"r11",0,0,0,0,
0,"r22",0,0,0,
0,0,"r33",0,0,
0,0,0,"r44",0,
0,0,0,0,"r55")
R = matrix(R.vals, nrow=N.ts, ncol=N.ts, byrow=TRUE)
x0 = U = matrix(0, nrow=3, ncol=1)
A = matrix(0, nrow=6, ncol=1)
x0 = U = A = "zero"
V0 = diag(5,3)
dfa.model = list(Z=Z, A="zero", R=R, B=B, U=U, Q=Q, x0=x0, V0=V0)
cntl.list = list(maxit=50)
kemz.3 = MARSS(dat.z, model=dfa.model, control=cntl.list)
plot(dat.spp.1980[1, ], pch=20, type="b", main="Cryptomonas")
points(kemz.3$marss$data[1,], pch=20, col="blue")
par(mfrow=c(3, 2))
par(mfrow=c(3, 2))
plot(dat.spp.1980[1, ], pch=20, type="b", main="Cryptomonas")
points(kemz.3$marss$data[1,], pch=20, col="blue")
plot(dat.spp.1980[2, ], pch=20, type="b", main="Diatoms")
points(kemz.3$marss$data[2,], pch=20, col="blue")
plot(dat.spp.1980[3, ], pch=20, type="b", main="Greens")
points(kemz.3$marss$data[3,], pch=20, col="blue")
plot(dat.spp.1980[4, ], pch=20, type="b", main="Unicells")
points(kemz.3$marss$data[4,], pch=20, col="blue")
plot(dat.spp.1980[5, ], pch=20, type="b", main="Other.algae")
points(kemz.3$marss$data[5,], pch=20, col="blue")
plot(dat.spp.1980[1, ], pch=20, type="b", main="Cryptomonas")
points(kemz.3$marss$data[6,], pch=20, col="blue")
dist(dat.spp.1980)
model.list = list(m=2, R="diagonal and unequal")
kemz.2 = MARSS(
dat.spp.1980,
model=model.list,
z.score=TRUE,
form="dfa",
control=cntl.list)
print(cbind(model=c("3 trends", "2 trends"),
AICc=round(c(kemz.3$AICc, kemz.2$AICc))),
quote=FALSE)
# set new control params
cntl.list = list(minit=200, maxit=5000, allow.degen=FALSE)
# set up forms of R matrices
levels.R = c("diagonal and equal",
"diagonal and unequal",
"equalvarcov",
"unconstrained")
model.data = data.frame()
# fit lots of models & store results
# NOTE: this will take a long time to run!
for(R in levels.R) {
for(m in 1:(N.ts-1)) {
dfa.model = list(A="zero", R=R, m=m)
kemz = MARSS(dat.z, model=dfa.model,
control=cntl.list,
form="dfa", z.score=TRUE)
model.data = rbind(model.data,
data.frame(R=R,
m=m,
logLik=kemz$logLik,
K=kemz$num.params,
AICc=kemz$AICc,
stringsAsFactors=FALSE))
assign(paste("kemz", m, R, sep="."), kemz)
} # end m loop
} # end R loop
save.image("C:/Users/clinton/GitHub/CodeLearn/LearnR/LearnStatFactAnal/workspace.RData")
